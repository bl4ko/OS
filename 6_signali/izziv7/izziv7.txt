# -- lovec.c  -----------------------------------------------------------------------------------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <err.h>
#include <sys/types.h>
#include <sys/time.h>

int energy = 0;
char znak = '.';

void handle_sigterm(int sig) {
    energy += 10;
    printf("Yahoo! Bonus energy (%d)\n.", energy);
}

void handle_sigusr1(int sig) {
    if (znak == '.') znak = '*';
    else znak = '.';
}

void handle_sigusr2(int sig) {
   int pid = fork(); 
   if (pid == 0) {
       sleep((energy % 7) + 1);
       int exit_status = (42 * energy) % 128;
       printf("Child exit with status: %d\n", exit_status);
       exit(exit_status);
    } else {
        printf("Forked child %d\n", pid);
   }
}

void catch_zombie(int sig) {
    int status = 0;
    while (wait(&status) > 0) {
        if (WIFEXITED(status)) {
            int exit_status = WEXITSTATUS(status);
            printf("Zombie with status %d cought!\n", exit_status);
            return;
        }
    }
}

int main(int argc, char *argv[])
{
    energy = argc == 2 ? atoi(argv[1]) : 42;

    int pid = fork();
    if (pid == 0) {
        char ppid[10];
        sprintf(ppid, "%d", getppid());
        printf("ppid: %s\n", ppid);
        execl("./sigsend.sh", "./sigsend.sh", ppid, (char *) 0);
        perror("execvp");
        return 1;
    }
    else {

        signal(SIGTERM, &handle_sigterm);
        signal(SIGUSR1, &handle_sigusr1);
        signal(SIGUSR2, &handle_sigusr2);
        signal(SIGCHLD, catch_zombie);

        printf("My PID: %d\n", getpid()); 
        while (energy > 0) {
            sleep(1);
            putchar(znak);
            fflush(stdout);
            energy-=1;
        }
        kill(pid, SIGKILL); // kill the child
        wait(NULL);
        printf("\nOut of energy. Aggghhhhhrrr\n");
    }
    return 0;
}

# -- sigsend.sh -------------------------------------------------------------------------------------------------------------------------------
#!/bin/bash

# Variables that store colors: https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
RED='\033[0;31m'    # Red color
GREEN='\033[1;32m'
CYAN='\033[1;36m'   # Cyan color
NC='\033[0m'        # No Color

# help function
function help() {
    echo -e "${GREEN}Press any of the following keys:${NC} "
    echo -e "   [${RED}x${NC}] - exit ${0}"
    echo -e "   [${RED}w${NC}] - send ${CYAN}SIGHUP${NC}     Terminal closure"
    echo -e "   [${RED}i${NC}] - send ${CYAN}SIGINT${NC}     Process termination: CTRL+C"
    echo -e "   [${RED}q${NC}] - send ${CYAN}SIGQUIT${NC}    Process termination: CTRL+/"
    echo -e "   [${RED}t${NC}] - send ${CYAN}SIGTERM${NC}    Software termination signal (default kill)"
    echo -e "   [${RED}k${NC}] - send ${CYAN}SIGKILL${NC}    Unconditionall process termination"
    echo -e "   [${RED}c${NC}] - send ${CYAN}SIGCONT${NC}    Continoue process execution"
    echo -e "   [${RED}s${NC}] - send ${CYAN}SIGSTOP${NC}    Unconditionall halt process"
    echo -e "   [${RED}z${NC}] - send ${CYAN}SIGSTP${NC}     Halt process CTRL+Z "
    echo -e "   [${RED}1${NC}] - send ${CYAN}SIGUSR1${NC}    1. user signal"
    echo -e "   [${RED}2${NC}] - send ${CYAN}SIGUSR2${NC}    2. user signal"
    echo -e "   [${RED}y${NC}] - send ${CYAN}SIGCHILD${NC}   Child termination"
}

# Main program
ppid=$1


while true
do
    read -n 1 -s input
    # -n defines the required character count to stop reading
    # -s hides the user's input

    case $input in
        "x") echo -e "\nChild has exited" && exit 0 ;;
        "h") help ;; 
        "w") kill -1 $ppid ;;       # SIGHUP
        "i") kill -2 $ppid ;;       # SIGINT
        "q") kill -3 $ppid ;;       # SIGQUIT
        "t") kill -15 $ppid ;;      # SIGTERM 
        "k") kill -9 $ppid ;;       # SIGKILL
        "c") kill -19 $ppid ;;      # SIGCONT
        "s") kill -17 $ppid ;;      # SIGSTOP
        "z") kill -18 $ppid ;;      # SIGTSTP
        "1") kill -30 $ppid ;;      # SIGUSR1
        "2") kill -31 $ppid ;;      # SIGUSR2
        "y") kill -20 $ppid ;;      # SIGCHLD
    esac
done